# coding: utf-8

"""
    FerryTix

    This is the api for the FerryTix Passenger Ferry Ticketing System, that is both accessible to the vending machines and to other clients.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hendrik.lankers.hl@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MachineConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'for_machine': 'str',
        'max_bicycles': 'int',
        'max_bicycles_tolerance': 'int',
        'max_passengers': 'int',
        'max_passengers_tolerance': 'int',
        'fares': 'list[Fare]'
    }

    attribute_map = {
        'for_machine': 'forMachine',
        'max_bicycles': 'maxBicycles',
        'max_bicycles_tolerance': 'maxBicyclesTolerance',
        'max_passengers': 'maxPassengers',
        'max_passengers_tolerance': 'maxPassengersTolerance',
        'fares': 'fares'
    }

    def __init__(self, for_machine=None, max_bicycles=None, max_bicycles_tolerance=None, max_passengers=None, max_passengers_tolerance=None, fares=None):  # noqa: E501
        """MachineConfiguration - a model defined in Swagger"""  # noqa: E501
        self._for_machine = None
        self._max_bicycles = None
        self._max_bicycles_tolerance = None
        self._max_passengers = None
        self._max_passengers_tolerance = None
        self._fares = None
        self.discriminator = None
        if for_machine is not None:
            self.for_machine = for_machine
        if max_bicycles is not None:
            self.max_bicycles = max_bicycles
        if max_bicycles_tolerance is not None:
            self.max_bicycles_tolerance = max_bicycles_tolerance
        if max_passengers is not None:
            self.max_passengers = max_passengers
        if max_passengers_tolerance is not None:
            self.max_passengers_tolerance = max_passengers_tolerance
        if fares is not None:
            self.fares = fares

    @property
    def for_machine(self):
        """Gets the for_machine of this MachineConfiguration.  # noqa: E501

        The machine id for which to apply these settings. May be left empty in a POST request if applicable for all machines.  # noqa: E501

        :return: The for_machine of this MachineConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._for_machine

    @for_machine.setter
    def for_machine(self, for_machine):
        """Sets the for_machine of this MachineConfiguration.

        The machine id for which to apply these settings. May be left empty in a POST request if applicable for all machines.  # noqa: E501

        :param for_machine: The for_machine of this MachineConfiguration.  # noqa: E501
        :type: str
        """

        self._for_machine = for_machine

    @property
    def max_bicycles(self):
        """Gets the max_bicycles of this MachineConfiguration.  # noqa: E501


        :return: The max_bicycles of this MachineConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_bicycles

    @max_bicycles.setter
    def max_bicycles(self, max_bicycles):
        """Sets the max_bicycles of this MachineConfiguration.


        :param max_bicycles: The max_bicycles of this MachineConfiguration.  # noqa: E501
        :type: int
        """

        self._max_bicycles = max_bicycles

    @property
    def max_bicycles_tolerance(self):
        """Gets the max_bicycles_tolerance of this MachineConfiguration.  # noqa: E501

        Tolerance fot the maximal amount of passengers carrying a bicycle in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :return: The max_bicycles_tolerance of this MachineConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_bicycles_tolerance

    @max_bicycles_tolerance.setter
    def max_bicycles_tolerance(self, max_bicycles_tolerance):
        """Sets the max_bicycles_tolerance of this MachineConfiguration.

        Tolerance fot the maximal amount of passengers carrying a bicycle in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :param max_bicycles_tolerance: The max_bicycles_tolerance of this MachineConfiguration.  # noqa: E501
        :type: int
        """

        self._max_bicycles_tolerance = max_bicycles_tolerance

    @property
    def max_passengers(self):
        """Gets the max_passengers of this MachineConfiguration.  # noqa: E501


        :return: The max_passengers of this MachineConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_passengers

    @max_passengers.setter
    def max_passengers(self, max_passengers):
        """Sets the max_passengers of this MachineConfiguration.


        :param max_passengers: The max_passengers of this MachineConfiguration.  # noqa: E501
        :type: int
        """

        self._max_passengers = max_passengers

    @property
    def max_passengers_tolerance(self):
        """Gets the max_passengers_tolerance of this MachineConfiguration.  # noqa: E501

        Tolerance fot the maximal amount of passengers in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :return: The max_passengers_tolerance of this MachineConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_passengers_tolerance

    @max_passengers_tolerance.setter
    def max_passengers_tolerance(self, max_passengers_tolerance):
        """Sets the max_passengers_tolerance of this MachineConfiguration.

        Tolerance fot the maximal amount of passengers in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :param max_passengers_tolerance: The max_passengers_tolerance of this MachineConfiguration.  # noqa: E501
        :type: int
        """

        self._max_passengers_tolerance = max_passengers_tolerance

    @property
    def fares(self):
        """Gets the fares of this MachineConfiguration.  # noqa: E501


        :return: The fares of this MachineConfiguration.  # noqa: E501
        :rtype: list[Fare]
        """
        return self._fares

    @fares.setter
    def fares(self, fares):
        """Sets the fares of this MachineConfiguration.


        :param fares: The fares of this MachineConfiguration.  # noqa: E501
        :type: list[Fare]
        """

        self._fares = fares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
