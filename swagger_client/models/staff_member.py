# coding: utf-8

"""
    FerryTix

    This is the api for the FerryTix Passenger Ferry Ticketing System, that is both accessible to the vending machines and to other clients.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hendrik.lankers.hl@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StaffMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'role': 'StaffRole'
    }

    attribute_map = {
        'uuid': 'uuid',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'role': 'role'
    }

    def __init__(self, uuid=None, first_name=None, last_name=None, role=None):  # noqa: E501
        """StaffMember - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._first_name = None
        self._last_name = None
        self._role = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if role is not None:
            self.role = role

    @property
    def uuid(self):
        """Gets the uuid of this StaffMember.  # noqa: E501


        :return: The uuid of this StaffMember.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this StaffMember.


        :param uuid: The uuid of this StaffMember.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def first_name(self):
        """Gets the first_name of this StaffMember.  # noqa: E501


        :return: The first_name of this StaffMember.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this StaffMember.


        :param first_name: The first_name of this StaffMember.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this StaffMember.  # noqa: E501


        :return: The last_name of this StaffMember.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this StaffMember.


        :param last_name: The last_name of this StaffMember.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def role(self):
        """Gets the role of this StaffMember.  # noqa: E501


        :return: The role of this StaffMember.  # noqa: E501
        :rtype: StaffRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this StaffMember.


        :param role: The role of this StaffMember.  # noqa: E501
        :type: StaffRole
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StaffMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaffMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
