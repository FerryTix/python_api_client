# coding: utf-8

"""
    FerryTix

    This is the api for the FerryTix Passenger Ferry Ticketing System, that is both accessible to the vending machines and to other clients.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hendrik.lankers.hl@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MachineStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vending': 'bool',
        'battery_charge': 'float',
        'estimated_receipt_paper_fill_level': 'float',
        'receipt_paper_roll_length': 'int',
        'cpu_temperature': 'float',
        'tickets_sold_today': 'MachineStatusTicketsSoldToday',
        'volume_of_sales_today': 'int',
        'waiting': 'list[WaitingPassenger]'
    }

    attribute_map = {
        'vending': 'vending',
        'battery_charge': 'batteryCharge',
        'estimated_receipt_paper_fill_level': 'estimatedReceiptPaperFillLevel',
        'receipt_paper_roll_length': 'receiptPaperRollLength',
        'cpu_temperature': 'cpuTemperature',
        'tickets_sold_today': 'ticketsSoldToday',
        'volume_of_sales_today': 'volumeOfSalesToday',
        'waiting': 'waiting'
    }

    def __init__(self, vending=None, battery_charge=None, estimated_receipt_paper_fill_level=None, receipt_paper_roll_length=None, cpu_temperature=None, tickets_sold_today=None, volume_of_sales_today=None, waiting=None):  # noqa: E501
        """MachineStatus - a model defined in Swagger"""  # noqa: E501
        self._vending = None
        self._battery_charge = None
        self._estimated_receipt_paper_fill_level = None
        self._receipt_paper_roll_length = None
        self._cpu_temperature = None
        self._tickets_sold_today = None
        self._volume_of_sales_today = None
        self._waiting = None
        self.discriminator = None
        if vending is not None:
            self.vending = vending
        if battery_charge is not None:
            self.battery_charge = battery_charge
        if estimated_receipt_paper_fill_level is not None:
            self.estimated_receipt_paper_fill_level = estimated_receipt_paper_fill_level
        if receipt_paper_roll_length is not None:
            self.receipt_paper_roll_length = receipt_paper_roll_length
        if cpu_temperature is not None:
            self.cpu_temperature = cpu_temperature
        if tickets_sold_today is not None:
            self.tickets_sold_today = tickets_sold_today
        if volume_of_sales_today is not None:
            self.volume_of_sales_today = volume_of_sales_today
        if waiting is not None:
            self.waiting = waiting

    @property
    def vending(self):
        """Gets the vending of this MachineStatus.  # noqa: E501


        :return: The vending of this MachineStatus.  # noqa: E501
        :rtype: bool
        """
        return self._vending

    @vending.setter
    def vending(self, vending):
        """Sets the vending of this MachineStatus.


        :param vending: The vending of this MachineStatus.  # noqa: E501
        :type: bool
        """

        self._vending = vending

    @property
    def battery_charge(self):
        """Gets the battery_charge of this MachineStatus.  # noqa: E501


        :return: The battery_charge of this MachineStatus.  # noqa: E501
        :rtype: float
        """
        return self._battery_charge

    @battery_charge.setter
    def battery_charge(self, battery_charge):
        """Sets the battery_charge of this MachineStatus.


        :param battery_charge: The battery_charge of this MachineStatus.  # noqa: E501
        :type: float
        """

        self._battery_charge = battery_charge

    @property
    def estimated_receipt_paper_fill_level(self):
        """Gets the estimated_receipt_paper_fill_level of this MachineStatus.  # noqa: E501


        :return: The estimated_receipt_paper_fill_level of this MachineStatus.  # noqa: E501
        :rtype: float
        """
        return self._estimated_receipt_paper_fill_level

    @estimated_receipt_paper_fill_level.setter
    def estimated_receipt_paper_fill_level(self, estimated_receipt_paper_fill_level):
        """Sets the estimated_receipt_paper_fill_level of this MachineStatus.


        :param estimated_receipt_paper_fill_level: The estimated_receipt_paper_fill_level of this MachineStatus.  # noqa: E501
        :type: float
        """

        self._estimated_receipt_paper_fill_level = estimated_receipt_paper_fill_level

    @property
    def receipt_paper_roll_length(self):
        """Gets the receipt_paper_roll_length of this MachineStatus.  # noqa: E501


        :return: The receipt_paper_roll_length of this MachineStatus.  # noqa: E501
        :rtype: int
        """
        return self._receipt_paper_roll_length

    @receipt_paper_roll_length.setter
    def receipt_paper_roll_length(self, receipt_paper_roll_length):
        """Sets the receipt_paper_roll_length of this MachineStatus.


        :param receipt_paper_roll_length: The receipt_paper_roll_length of this MachineStatus.  # noqa: E501
        :type: int
        """

        self._receipt_paper_roll_length = receipt_paper_roll_length

    @property
    def cpu_temperature(self):
        """Gets the cpu_temperature of this MachineStatus.  # noqa: E501


        :return: The cpu_temperature of this MachineStatus.  # noqa: E501
        :rtype: float
        """
        return self._cpu_temperature

    @cpu_temperature.setter
    def cpu_temperature(self, cpu_temperature):
        """Sets the cpu_temperature of this MachineStatus.


        :param cpu_temperature: The cpu_temperature of this MachineStatus.  # noqa: E501
        :type: float
        """

        self._cpu_temperature = cpu_temperature

    @property
    def tickets_sold_today(self):
        """Gets the tickets_sold_today of this MachineStatus.  # noqa: E501


        :return: The tickets_sold_today of this MachineStatus.  # noqa: E501
        :rtype: MachineStatusTicketsSoldToday
        """
        return self._tickets_sold_today

    @tickets_sold_today.setter
    def tickets_sold_today(self, tickets_sold_today):
        """Sets the tickets_sold_today of this MachineStatus.


        :param tickets_sold_today: The tickets_sold_today of this MachineStatus.  # noqa: E501
        :type: MachineStatusTicketsSoldToday
        """

        self._tickets_sold_today = tickets_sold_today

    @property
    def volume_of_sales_today(self):
        """Gets the volume_of_sales_today of this MachineStatus.  # noqa: E501


        :return: The volume_of_sales_today of this MachineStatus.  # noqa: E501
        :rtype: int
        """
        return self._volume_of_sales_today

    @volume_of_sales_today.setter
    def volume_of_sales_today(self, volume_of_sales_today):
        """Sets the volume_of_sales_today of this MachineStatus.


        :param volume_of_sales_today: The volume_of_sales_today of this MachineStatus.  # noqa: E501
        :type: int
        """

        self._volume_of_sales_today = volume_of_sales_today

    @property
    def waiting(self):
        """Gets the waiting of this MachineStatus.  # noqa: E501


        :return: The waiting of this MachineStatus.  # noqa: E501
        :rtype: list[WaitingPassenger]
        """
        return self._waiting

    @waiting.setter
    def waiting(self, waiting):
        """Sets the waiting of this MachineStatus.


        :param waiting: The waiting of this MachineStatus.  # noqa: E501
        :type: list[WaitingPassenger]
        """

        self._waiting = waiting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
