# coding: utf-8

"""
    FerryTix

    This is the api for the FerryTix Passenger Ferry Ticketing System, that is both accessible to the vending machines and to other clients.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hendrik.lankers.hl@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketSale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'issued_by': 'str',
        'issued_at': 'datetime',
        'return_valid': 'bool',
        '_from': 'MachineLocation',
        'payment': 'Payment',
        'positions': 'list[Position]',
        'signature': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'issued_by': 'issuedBy',
        'issued_at': 'issuedAt',
        'return_valid': 'returnValid',
        '_from': 'from',
        'payment': 'payment',
        'positions': 'positions',
        'signature': 'signature'
    }

    def __init__(self, uuid=None, issued_by=None, issued_at=None, return_valid=None, _from=None, payment=None, positions=None, signature=None):  # noqa: E501
        """TicketSale - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._issued_by = None
        self._issued_at = None
        self._return_valid = None
        self.__from = None
        self._payment = None
        self._positions = None
        self._signature = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if issued_by is not None:
            self.issued_by = issued_by
        if issued_at is not None:
            self.issued_at = issued_at
        if return_valid is not None:
            self.return_valid = return_valid
        if _from is not None:
            self._from = _from
        if payment is not None:
            self.payment = payment
        if positions is not None:
            self.positions = positions
        if signature is not None:
            self.signature = signature

    @property
    def uuid(self):
        """Gets the uuid of this TicketSale.  # noqa: E501


        :return: The uuid of this TicketSale.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TicketSale.


        :param uuid: The uuid of this TicketSale.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def issued_by(self):
        """Gets the issued_by of this TicketSale.  # noqa: E501


        :return: The issued_by of this TicketSale.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this TicketSale.


        :param issued_by: The issued_by of this TicketSale.  # noqa: E501
        :type: str
        """

        self._issued_by = issued_by

    @property
    def issued_at(self):
        """Gets the issued_at of this TicketSale.  # noqa: E501


        :return: The issued_at of this TicketSale.  # noqa: E501
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this TicketSale.


        :param issued_at: The issued_at of this TicketSale.  # noqa: E501
        :type: datetime
        """

        self._issued_at = issued_at

    @property
    def return_valid(self):
        """Gets the return_valid of this TicketSale.  # noqa: E501


        :return: The return_valid of this TicketSale.  # noqa: E501
        :rtype: bool
        """
        return self._return_valid

    @return_valid.setter
    def return_valid(self, return_valid):
        """Sets the return_valid of this TicketSale.


        :param return_valid: The return_valid of this TicketSale.  # noqa: E501
        :type: bool
        """

        self._return_valid = return_valid

    @property
    def _from(self):
        """Gets the _from of this TicketSale.  # noqa: E501


        :return: The _from of this TicketSale.  # noqa: E501
        :rtype: MachineLocation
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this TicketSale.


        :param _from: The _from of this TicketSale.  # noqa: E501
        :type: MachineLocation
        """

        self.__from = _from

    @property
    def payment(self):
        """Gets the payment of this TicketSale.  # noqa: E501


        :return: The payment of this TicketSale.  # noqa: E501
        :rtype: Payment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this TicketSale.


        :param payment: The payment of this TicketSale.  # noqa: E501
        :type: Payment
        """

        self._payment = payment

    @property
    def positions(self):
        """Gets the positions of this TicketSale.  # noqa: E501


        :return: The positions of this TicketSale.  # noqa: E501
        :rtype: list[Position]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this TicketSale.


        :param positions: The positions of this TicketSale.  # noqa: E501
        :type: list[Position]
        """

        self._positions = positions

    @property
    def signature(self):
        """Gets the signature of this TicketSale.  # noqa: E501


        :return: The signature of this TicketSale.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this TicketSale.


        :param signature: The signature of this TicketSale.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketSale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketSale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
