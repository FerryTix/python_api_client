# coding: utf-8

"""
    FerryTix

    This is the api for the FerryTix Passenger Ferry Ticketing System, that is both accessible to the vending machines and to other clients.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hendrik.lankers.hl@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bicycle': 'bool',
        '_return': 'bool',
        'reduced': 'bool',
        'staff': 'bool'
    }

    attribute_map = {
        'bicycle': 'bicycle',
        '_return': 'return',
        'reduced': 'reduced',
        'staff': 'staff'
    }

    def __init__(self, bicycle=None, _return=None, reduced=None, staff=None):  # noqa: E501
        """TicketClass - a model defined in Swagger"""  # noqa: E501
        self._bicycle = None
        self.__return = None
        self._reduced = None
        self._staff = None
        self.discriminator = None
        if bicycle is not None:
            self.bicycle = bicycle
        if _return is not None:
            self._return = _return
        if reduced is not None:
            self.reduced = reduced
        if staff is not None:
            self.staff = staff

    @property
    def bicycle(self):
        """Gets the bicycle of this TicketClass.  # noqa: E501

        whether or not a bicycle was carried  # noqa: E501

        :return: The bicycle of this TicketClass.  # noqa: E501
        :rtype: bool
        """
        return self._bicycle

    @bicycle.setter
    def bicycle(self, bicycle):
        """Sets the bicycle of this TicketClass.

        whether or not a bicycle was carried  # noqa: E501

        :param bicycle: The bicycle of this TicketClass.  # noqa: E501
        :type: bool
        """

        self._bicycle = bicycle

    @property
    def _return(self):
        """Gets the _return of this TicketClass.  # noqa: E501

        whether or not a return trip has been purchased  # noqa: E501

        :return: The _return of this TicketClass.  # noqa: E501
        :rtype: bool
        """
        return self.__return

    @_return.setter
    def _return(self, _return):
        """Sets the _return of this TicketClass.

        whether or not a return trip has been purchased  # noqa: E501

        :param _return: The _return of this TicketClass.  # noqa: E501
        :type: bool
        """

        self.__return = _return

    @property
    def reduced(self):
        """Gets the reduced of this TicketClass.  # noqa: E501

        reduced fare for physically disabled persons and children under the age of 14  # noqa: E501

        :return: The reduced of this TicketClass.  # noqa: E501
        :rtype: bool
        """
        return self._reduced

    @reduced.setter
    def reduced(self, reduced):
        """Sets the reduced of this TicketClass.

        reduced fare for physically disabled persons and children under the age of 14  # noqa: E501

        :param reduced: The reduced of this TicketClass.  # noqa: E501
        :type: bool
        """

        self._reduced = reduced

    @property
    def staff(self):
        """Gets the staff of this TicketClass.  # noqa: E501

        only for staff members  # noqa: E501

        :return: The staff of this TicketClass.  # noqa: E501
        :rtype: bool
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this TicketClass.

        only for staff members  # noqa: E501

        :param staff: The staff of this TicketClass.  # noqa: E501
        :type: bool
        """

        self._staff = staff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
